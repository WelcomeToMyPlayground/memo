1. document.write()
= () 안에 것을 출력하라는 메서드

2. window.alert()
= 경고창을 띄워 ()안의 것을 출력하라는 메서드

3. innerHTML=""
= HTML로 어떤 내용물을 출력할 때, 그 HTML 요소에 접근하여 내용물을 바꿀 수 있음
HTML 요소에 접근하려면 document.getElementById 메서드를 함께 사용한다

4. elem.innerHTML += "추가 html";

-> 실제 html에는 <div></div> 태그만 두고,
-> js파일에서 small일 때 div, big일 때 div 설정

5. innerHTML += 은
- 기존 내용 삭제
- 기존 내용과 새로운 내용을 합친 새로운 내용을 씀

6. innerHTML+= 부작용
- 기존 내용이 '완전히 삭제'된 후 밑바닥부터 다시 내용이 쓰여지기 때문에,
이미지 등의 리소스 전부가 다시 로딩됨

7. innnerHTML 프로퍼티는 id가 "content"인 <div> 태그 안의 HTML 요소가 포함된 내용을 가져온다. 
만약, <div> 태그 안의 텍스트만 가져오고 싶다면 innerText 또는 textContent 프로퍼티를 사용한다.

8. element.innerText
= 이 속성은 element 안의 text 값들만을 가져온다

9. element.innerHTML;
= innerText와는 달리 innerHTML은 element 안의 html이나 xml을 가져온다

10. const element = document.getElementById('content')
=> alert(element.innerText); => html 코드 안의 내용물만 출력

11.  const element = document.getElementById('content')
=> alert(element.innerHTML); => <div>A</div> 같이 html 코드까지 모두 출력

-------------------------------------------------------------------------------------
12. html 코드
<div id='content'></div>

<input type='button' value='innerText()' onclick='setInnerText()' />
<input type='button' value='innerHTML()' onclick='setInnerHTML()' />

13. js 코드

function setInnerText()  {
  const element = document.getElementById('content');
  element.innerText = "<div style='color:red'>A</div>"; 
}

 => 내용물 그대로가 출력됨(element.innerText에 html을 포함한 문자열을 입력하면, html코드가 문자열 그대로 element안에 포함된다)


function setInnerHTML()  {
  const element = document.getElementById('content');
  element.innerHTML = "<div style='color:red'>A</div>"; 
}

=> 입력된 html 태그가 해석되어 빨간색 A가 나타남
(element.innerHTML 속성에 html코드를 입력하면, html element가 element안에 포함되게 된다)
(위 예제에서 'innerHTML()'을 클릭하면,입력된 html태그가 해석되어 빨간색 A 가 나타나는 것을 확인할 수 있다.)
-------------------------------------------------------------------------------------

